
ATmega328P_Receives.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067c  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00000f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main()
{
	
	unsigned int ubrr = BAUD_RATE_9600_BPS; 
	
	PORTC = 0x00; //All LED's OFF
  80:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  82:	1b b8       	out	0x0b, r1	; 11
	
	/* Set Baudrate @ 230.4k bps */
	UBRR0H = (ubrr>>8);
  84:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (ubrr);
  88:	87 e4       	ldi	r24, 0x47	; 71
  8a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*Enable receiver  */
	UCSR0B = (1<<RXEN0);
  8e:	80 e1       	ldi	r24, 0x10	; 16
  90:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 0x06;
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	while(1)
	{
		while ( !(UCSR0A & (1<<RXC0)) ); /* Wait for data to be received */
  9a:	e0 ec       	ldi	r30, 0xC0	; 192
  9c:	f0 e0       	ldi	r31, 0x00	; 0
	
		switch(UDR0) // using the switch() statement to  control the LED and Buzzer		
  9e:	a6 ec       	ldi	r26, 0xC6	; 198
  a0:	b0 e0       	ldi	r27, 0x00	; 0
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 0x06;
	
	while(1)
	{
		while ( !(UCSR0A & (1<<RXC0)) ); /* Wait for data to be received */
  a2:	80 81       	ld	r24, Z
  a4:	88 23       	and	r24, r24
  a6:	ec f7       	brge	.-6      	; 0xa2 <main+0x22>
	
		switch(UDR0) // using the switch() statement to  control the LED and Buzzer		
  a8:	8c 91       	ld	r24, X
  aa:	81 34       	cpi	r24, 0x41	; 65
  ac:	19 f0       	breq	.+6      	; 0xb4 <main+0x34>
  ae:	82 34       	cpi	r24, 0x42	; 66
  b0:	71 f0       	breq	.+28     	; 0xce <main+0x4e>
  b2:	f7 cf       	rjmp	.-18     	; 0xa2 <main+0x22>
		{
			case 'A' : 	DDRC  |= (1<<PC4); // Blinks LED
  b4:	3c 9a       	sbi	0x07, 4	; 7
						PORTC |= (1<<PC4);
  b6:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f e9       	ldi	r18, 0x9F	; 159
  ba:	86 e8       	ldi	r24, 0x86	; 134
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
						_delay_ms(500);
						PORTC &= ~(1<<PC4);
  ca:	44 98       	cbi	0x08, 4	; 8
						break;
  cc:	ea cf       	rjmp	.-44     	; 0xa2 <main+0x22>
				
            case 'B' : 	DDRC  |= (1<<PC5); // Beeps Buzzer
  ce:	3d 9a       	sbi	0x07, 5	; 7
						PORTC |= (1<<PC5);
  d0:	45 9a       	sbi	0x08, 5	; 8
  d2:	2f e9       	ldi	r18, 0x9F	; 159
  d4:	86 e8       	ldi	r24, 0x86	; 134
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
						_delay_ms(500);
						PORTC &= ~(1<<PC5);
  e4:	45 98       	cbi	0x08, 5	; 8
						break;			
  e6:	dd cf       	rjmp	.-70     	; 0xa2 <main+0x22>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
