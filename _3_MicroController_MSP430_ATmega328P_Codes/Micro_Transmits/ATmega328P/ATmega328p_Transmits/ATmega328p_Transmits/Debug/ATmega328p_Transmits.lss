
ATmega328p_Transmits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073d  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00001033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
// +-----------------------------------------------------------------------+ //



int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	68 97       	sbiw	r28, 0x18	; 24
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	unsigned int ubrr = BAUD_RATE_9600_BPS;
	
	unsigned char data[] = "Hello from ATmega328p  ";
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	
	/* Set Baudrate  */
	UBRR0H = (ubrr>>8); // Shift the 16bit value ubrr 8 times to the right and transfer the upper 8 bits to UBBR0H register.
  bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (ubrr);    // Copy the 16 bit value ubrr to the 8 bit UBBR0L register,Upper 8 bits are truncated while lower 8 bits are copied
  c0:	87 e4       	ldi	r24, 0x47	; 71
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	

	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	// Send  a single instance of "Hello from ATmega328p"
	    i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
  d2:	99 81       	ldd	r25, Y+1	; 0x01
  d4:	99 23       	and	r25, r25
  d6:	89 f0       	breq	.+34     	; 0xfa <main+0x64>
  d8:	ae 01       	movw	r20, r28
  da:	4e 5f       	subi	r20, 0xFE	; 254
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
											 /* So NOT{[UCSR0A & (1<<UDRE0)] = 0} = 1 ,While(1) loop stays there */
											 
											 /* When UDRE0 = 1,data transmission completed.                       */
											 /* So NOT{[UCSR0A & (1<<UDRE0)] = 1} = 0 ,While(0) loop fails       */
											 
			UDR0 = data[i];					 /* Put data into buffer, sends the data */
  e2:	26 ec       	ldi	r18, 0xC6	; 198
  e4:	30 e0       	ldi	r19, 0x00	; 0
	
	// Send  a single instance of "Hello from ATmega328p"
	    i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
		{
			while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
  e6:	80 81       	ld	r24, Z
  e8:	85 ff       	sbrs	r24, 5
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x50>
											 /* So NOT{[UCSR0A & (1<<UDRE0)] = 0} = 1 ,While(1) loop stays there */
											 
											 /* When UDRE0 = 1,data transmission completed.                       */
											 /* So NOT{[UCSR0A & (1<<UDRE0)] = 1} = 0 ,While(0) loop fails       */
											 
			UDR0 = data[i];					 /* Put data into buffer, sends the data */
  ec:	d9 01       	movw	r26, r18
  ee:	9c 93       	st	X, r25
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
	
	// Send  a single instance of "Hello from ATmega328p"
	    i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
  f0:	da 01       	movw	r26, r20
  f2:	9d 91       	ld	r25, X+
  f4:	ad 01       	movw	r20, r26
  f6:	91 11       	cpse	r25, r1
  f8:	f6 cf       	rjmp	.-20     	; 0xe6 <main+0x50>
		
		
		/* Sending '\n'  '\r' Character pair helps to format the output properly on console putty Screen */
		/*************************************************************************************************/
		/* Send "\n" Character */
		 while (!( UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer       */
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	85 ff       	sbrs	r24, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x68>
		 UDR0 = '\n';					    /* Put data into buffer, sends the data */
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
		/* Send "\r" Character */
		 while (!( UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer       */
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	85 ff       	sbrs	r24, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <main+0x78>
		 UDR0 = '\r';					    /* Put data into buffer, sends the data */
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	87 ea       	ldi	r24, 0xA7	; 167
 11c:	91 e6       	ldi	r25, 0x61	; 97
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x88>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x8e>
 124:	00 00       	nop
		_delay_ms(100);
		
		
	
		
}//end of main
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	68 96       	adiw	r28, 0x18	; 24
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
